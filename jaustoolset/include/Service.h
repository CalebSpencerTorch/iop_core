/***********           LICENSE HEADER   *******************************
JAUS Tool Set
Copyright (c)  2010, United States Government
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

       Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

       Redistributions in binary form must reproduce the above copyright 
notice, this list of conditions and the following disclaimer in the 
documentation and/or other materials provided with the distribution.

       Neither the name of the United States Government nor the names of 
its contributors may be used to endorse or promote products derived from 
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
*********************  END OF LICENSE ***********************************/

////////////////////////////////////////////////////////////////////////////////////////
// This file was generated by the JSIDL Code Generator with JSIDL specification V0.9.
// Any modifications to this file will be lost upon recompilation of the source xml.
// Generated on: 14 May 2008, 10:19:21 CDT                                                         
////////////////////////////////////////////////////////////////////////////////////////

#ifndef SERVICE_H_
#define SERVICE_H_

#include <iostream>
#include <string>
#include <set>
#include <queue>
#include <memory>

#include "JausUtils.h"
#include "EventReceiver.h"
#include "Transport/JausTransport.h"
#include "Transport/OS.h"
#include "InternalEvents/InternalEvent.h"

namespace iop{
	class Component;
}

namespace JTS
{

class DllExport Service : public EventReceiver
{
public:
	Service();
  	virtual ~Service();
	bool isInitialized();

	virtual bool processTransitions(JTS::InternalEvent* ie) = 0;
	virtual bool defaultTransitions(JTS::InternalEvent* ie) = 0;
	virtual void init_service(std::shared_ptr<iop::Component>, JTS::JausRouter* jausRouter, JTS::Service* parentService) = 0;
	// The registerService() will be overwritten by Discovery service
	virtual void registerService(std::string /*serviceuri*/, unsigned char /*maxver*/, unsigned char /*minver*/, JausAddress /*address*/) { std::cout << "registerService not implemented!" << std::endl; }

	const std::string getURN() const;
	const std::string getName() const;
	unsigned char getVersionManjor() const;
	unsigned char getVersionMinor() const;
	const std::string getURNInheritsFrom() const;
	const std::string getNameInheritsFrom() const;
	unsigned char getVersionManjorInheritsFrom() const;
	unsigned char getVersionMinorInheritsFrom() const;

	const std::set<jUnsignedShortInteger> &getInputMessageList() const;
	const std::set<jUnsignedShortInteger> &getOutputMessageList() const;

protected:
	virtual void processInternalEvent(InternalEvent* ie);

	std::set<jUnsignedShortInteger> m_InputMessageList;
	std::set<jUnsignedShortInteger> m_OutputMessageList;

	DeVivo::Junior::JrMutex mutex;
	bool p_initialized;
	std::string m_name;  // <service_def name<=
	std::string m_URN;  //  <service_def id<=
	unsigned char m_version_manjor;  //  <service_def version<=
	unsigned char m_version_minor;    //  <service_def version<=
	std::string m_uri_inherits_from;  //  <inherits_from id<=
	std::string m_name_inherits_from;  //  <inherits_from name<=
	unsigned char m_inherits_from_version_manjor;  //  <inherits_from version<=
	unsigned char m_inherits_from_min_version_minor;  //  <inherits_from version<=
};

}

#endif /* SERVICE_H_ */
