<?xml version="1.0" encoding="UTF-8"?>
<service_def xmlns="urn:jaus:jsidl:1.0" xmlns:ns2="urn:jaus:jsidl:1.1"
  name="DiscoveryClient" id="urn:jaus:jss:core:DiscoveryClient" version="1.1">
  <description>The process of discovery is conducted at both the node level and
    the subsystem level. This service supports the discovery of both legacy
    components defined in the JAUS Reference Architecture versions 3.2+, and new
    components. The Component IDs of legacy components were fixed at
    specification time (Primitive Driver = 33 for example) and could contain
    only one service beyond the core service support. New components may use any
    component ID that is outside the range of IDs that have been allocated to
    legacy component definitions. New components can also contain two or more
    services beyond the core service support. </description>
  <assumptions>Messages may be delayed, lost or reordered.</assumptions>
  <references>
    <inherits_from name="eventsClient" id="urn:jaus:jss:core:EventsClient" version="1.1"/>
  </references>
  <declared_type_set name="Types">
    <declared_type_set_ref name="core" id="urn:jaus:jss:core:MessageSet"
      version="1.1"/>
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="ReportIdentification"
        declared_type_ref="core.informClass.ReportIdentification"/>
      <declared_message_def name="ReportConfiguration"
        declared_type_ref="core.informClass.ReportConfiguration"/>
      <declared_message_def name="ReportSubsystemList"
        declared_type_ref="core.informClass.ReportSubsystemList"/>
      <declared_message_def name="ReportServices"
        declared_type_ref="core.informClass.ReportServices"/>
      <declared_message_def name="ReportServiceList"
        declared_type_ref="core.informClass.ReportServiceList"/>
      <declared_message_def name="QueryIdentification"
        declared_type_ref="core.queryClass.QueryIdentification"/>
    </input_set>
    <output_set>
      <declared_message_def name="QueryIdentification"
        declared_type_ref="core.queryClass.QueryIdentification"/>
      <declared_message_def name="QueryConfiguration"
        declared_type_ref="core.queryClass.QueryConfiguration"/>
      <declared_message_def name="QuerySubsystemList"
        declared_type_ref="core.queryClass.QuerySubsystemList"/>
      <declared_message_def name="QueryServices"
        declared_type_ref="core.queryClass.QueryServices"/>
      <declared_message_def name="QueryServiceList"
        declared_type_ref="core.queryClass.QueryServiceList"/>
      <declared_message_def name="RegisterServices"
        declared_type_ref="core.commandClass.RegisterServices"/>
    </output_set>
  </message_set>
    <internal_events_set>
      <event_def name="Timeout">
        <description> Occurs when access is not re-acquired periodically </description>
        <header name="Header"/>
        <body name="Body"/>
        <footer name="Footer"/>
      </event_def>
    </internal_events_set>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="eventsClient.transport.ReceiveFSM" state_name="Receiving.Ready"/>
    <state_machine name="eventsClient.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready">
          <entry>
              <action name="register" interpretation="register by discovery service"/>
          </entry>
          <default_state>
            <transition name="eventsClient.transport.Receive">
                <parameter type="ReportIdentification" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <guard condition="!isRegistered() &amp;&amp; !onRegistration()"/>
                <ns2:internal/>
                <action name="sendRegisterServices">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="eventsClient.transport.Receive">
                <parameter type="ReportIdentification" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportIdentification">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="eventsClient.transport.Receive">
                <parameter type="ReportConfiguration" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportConfiguration">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="eventsClient.transport.Receive">
                <parameter type="ReportSubsystemList" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportSubsystemList">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="eventsClient.transport.Receive">
                <parameter type="ReportServices" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportServices">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="eventsClient.transport.Receive">
                <parameter type="ReportServiceList" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportServiceList">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
            <transition name="eventsClient.transport.Receive">
                <parameter type="QueryIdentification" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleQueryIdentification">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
            <transition name="Timeout">
              <simple/>
              <action name="sendQueryIdentification" interpretation="Send a QueryIdentification message">
              </action>
            </transition>
          </default_state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
