<?xml version="1.0" encoding="UTF-8"?>
<service_def xmlns="urn:jaus:jsidl:1.0" xmlns:ns2="urn:jaus:jsidl:1.1" name="AccessControlClient"
  id="urn:jaus:jss:core:AccessControlClient" version="1.1">
  <description xml:space="preserve">
    The Access Control Client service offers a basic interface for acquiring preemptable exclusive control to one or more related services that utilize this function. Once the exclusive control is established, the related services shall only execute commands originating from the controlling component. The authority code parameter of this service is used for preemption and is to be set equal to that of its controlling client. This service always grants control to the highest authority client that is requesting exclusive control. Commands from all other clients are ignored unless from a client with higher authority.
    This service maintains two values, a default value and a current value of a field called authority code. The default value is the value that the service is pre-configured with. Access is provided to clients based on the value of their authority code in comparison to the current value of this service.
  </description>
  <assumptions>Messages may be delayed, lost or reordered.</assumptions>
  <references>
    <inherits_from name="eventsClient" id="urn:jaus:jss:core:EventsClient" version="1.1"/>
    <client_of name="AccessControl" id="urn:jaus:jss:core:AccessControl" version="1.1"/>
  </references>
  <declared_type_set name="Types">
    <declared_type_set_ref name="core" id="urn:jaus:jss:core:MessageSet"
      version="1.1"/>
                                <fixed_length_string name="fixedLenStr" string_length="20" optional="false"/>
                        <variable_length_string name="varLenStr" optional="false">
                            <count_field min_count="20" max_count="30" field_type_unsigned="unsigned byte"/>
                        </variable_length_string>

  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="ReportControl"
        declared_type_ref="core.informClass.ReportControl"/>
      <declared_message_def name="RejectControl"
        declared_type_ref="core.commandClass.RejectControl"/>
      <declared_message_def name="ConfirmControl"
        declared_type_ref="core.commandClass.ConfirmControl"/>
      <declared_message_def name="ReportAuthority"
        declared_type_ref="core.informClass.ReportAuthority"/>
      <declared_message_def name="ReportTimeout"
        declared_type_ref="core.informClass.ReportTimeout"/>
    </input_set>
    <output_set>
      <declared_message_def name="RequestControl"
        declared_type_ref="core.commandClass.RequestControl"/>
      <declared_message_def name="ReleaseControl"
        declared_type_ref="core.commandClass.ReleaseControl"/>
      <declared_message_def name="QueryControl"
        declared_type_ref="core.queryClass.QueryControl"/>
      <declared_message_def name="QueryAuthority"
        declared_type_ref="core.queryClass.QueryAuthority"/>
      <declared_message_def name="SetAuthority"
        declared_type_ref="core.commandClass.SetAuthority"/>
      <declared_message_def name="QueryTimeout"
        declared_type_ref="core.queryClass.QueryTimeout"/>
    </output_set>
  </message_set>
  <internal_events_set>
    <event_def name="Timeout">
      <description> Occurs when to reset timer periodically </description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
  </internal_events_set>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="eventsClient.transport.ReceiveFSM" state_name="Receiving.Ready"/>
    <state_machine name="eventsClient.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" interpretation="redefine state in order to extend">
          <default_state>
           <transition name="ConfirmControl">
                <parameter type="ConfirmControl" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleConfirmControl">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="ReportControl">
                <parameter type="ReportControl" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportControl">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="RejectControl">
                <parameter type="RejectControl" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleRejectControl">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="ReportAuthority">
                <parameter type="ReportAuthority" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportAuthority">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
           <transition name="ReportTimeout">
                <parameter type="ReportTimeout" value="msg"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                <ns2:internal/>
                <action name="handleReportTimeout">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                </action>
            </transition>
            <transition name="Timeout">
              <ns2:internal/>
              <action name="resetControlTimer" interpretation="">
              </action>
            </transition>
          </default_state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
