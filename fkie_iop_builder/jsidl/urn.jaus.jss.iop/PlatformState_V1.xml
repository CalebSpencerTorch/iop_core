<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<service_def name="PlatformState" id="urn:jaus:jss:iop:PlatformState" version="1.1"
	xmlns:ns2="urn:jaus:jsidl:plus" xmlns="urn:jaus:jsidl:1.0" xmlns:ns3="urn:jaus:jsidl:1.1">
	<description xml:space="preserve">The Platform State Service manages the state of a platform
	by issuing commands to and monitoring the JSS Core Management service residing on all component
	on-board the platform. It is expected that there is no more than one Platform State Service per platform.</description>
	<assumptions xml:space="preserve">Messages may be delayed, lost, or reordered.</assumptions>
	<references>
		<inherits_from name="AccessControl" id="urn:jaus:jss:core:AccessControl" version="1.1"/>
		<client_of name="Management" id="urn:jaus:jss:core:Management" version="1.1"/>
		<client_of name="RenderUseless" id="urn:jaus:jss:iop:RenderUseless" version="1.1"/>
	</references>
	<declared_type_set name="Types">
		<declared_type_set_ref name="core" id="urn:jaus:jss:iop:MessageSet" version="1.1"/>
	</declared_type_set>
	<message_set>
		<input_set>
			<declared_message_def name="SetPlatformState"
				declared_type_ref="core.platformClass.SetPlatformState"/>
			<declared_message_def name="QueryPlatformState"
				declared_type_ref="core.platformClass.QueryPlatformState"/>
		</input_set>
		<output_set>
			<declared_message_def name="SetEmergency"
				declared_type_ref="core.platformClass.SetEmergency"/>
			<declared_message_def name="ClearEmergency"
				declared_type_ref="core.platformClass.ClearEmergency"/>
			<declared_message_def name="ConfirmPlatformStateRequest"
				declared_type_ref="core.platformClass.ConfirmPlatformStateRequest"/>
			<declared_message_def name="ReportPlatformState"
				declared_type_ref="core.platformClass.ReportPlatformState"/>
		</output_set>
	</message_set>
	<internal_events_set>
		<!-- REMOVED PlatformStateFSM Events since this is done by ROS topics -->
	</internal_events_set>
	
	<protocol_behavior is_stateless="false">
		<start state_machine_name="accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled"/>
        <start state_machine_name="accessControl.events.transport.SendFSM" state_name="Sending"/>
		<!--  ROMOVED since it is done by ROS <start state_machine_name="PlatformStateFSM" state_name="Initialize"/> -->
		<state_machine name="accessControl.events.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
		<state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
		<state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">

			<state name="NotControlled">
				<default_state>
					<transition name="accessControl.events.transport.Receive">
						<parameter type="QueryPlatformState" value="msg" interpretation="enveloped Query Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<simple/>
						<action name="sendReportPlatformState" interpretation="Sends a ReportPlatformState to the requesting client.">
							<argument value="transportData"/>
						</action>
					</transition>
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isIDStored( transportData ) &amp;&amp; setToOperational( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to Operational."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerRecoverEmergency" interpretation="Trigger a 'Recover Emergency' Internal Event.">
						</action>
					</transition>
				</default_state>
			</state>
			
			<state name="Controlled" interpretation="redefine state in order to extend">
				<default_state>
					<transition name="accessControl.events.transport.Receive">
						<parameter type="QueryPlatformState" value="msg" interpretation="enveloped Query Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<simple/>
						<action name="sendReportPlatformState" interpretation="Sends a ReportPlatformState to the requesting client.">
							<argument value="transportData"/>
						</action>
					</transition>
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isControllingClient( transportData ) &amp;&amp; setToInitialize( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to Initialize."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerReset" interpretation="Trigger a 'Reset' Internal Event.">
						</action>
					</transition>
					
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isControllingClient( transportData ) &amp;&amp; setToEmergency( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to Emergency."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerEmergency" interpretation="Trigger an 'Emergency' Internal Event.">
						</action>
					</transition>
					
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isControllingClient( transportData ) &amp;&amp; setToShutdown( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to Shutdown."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerShutdown" interpretation="Trigger a 'Shutdown' Internal Event.">
						</action>
					</transition>
					
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isControllingClient( transportData ) &amp;&amp; setToRenderUseless( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to RenderUseless."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerRenderUseless" interpretation="Trigger a 'Render_Useless' Internal Event.">
						</action>
					</transition>
					
					<transition name="accessControl.events.transport.Receive">
						<parameter type="SetPlatformState" value="msg" interpretation="enveloped Set Platform State message"/>
						<parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
						<guard condition="isControllingClient( transportData ) &amp;&amp; setToOperational( msg )" interpretation="True if the sender of the message that triggered the transition is in control of this service AND the set message calls for a transition to Operational."/>
						<simple/>
						<action name="storeRequester" interpretation="Store the JAUS ID for the client requesting a state transition.">
							<argument value="transportData"/>
						</action>
						<action name="triggerRecoverEmergency" interpretation="Trigger a 'Recover Emergency' Internal Event.">
						</action>
					</transition>
				</default_state>
			</state> <!-- Controlled -->
		</state> <!-- Ready -->
		</state> <!-- Receiving -->
		</state_machine> <!-- accessControl.events.transport.ReceiveFSM -->
		<!-- REMOVED PlatformStateFSM since this is done by ROS topics -->
    <state_machine name="accessControl.events.transport.SendFSM">
        <state name="Sending"/>
    </state_machine>
	</protocol_behavior>
</service_def>
