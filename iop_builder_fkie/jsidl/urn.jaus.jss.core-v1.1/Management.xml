<?xml version="1.0" encoding="UTF-8"?>
<service_def name="Management" id="urn:jaus:jss:core:Management" version="1.1"
  xmlns="urn:jaus:jsidl:1.0" xmlns:ns2="urn:jaus:jsidl:1.1">
  <description>The Management Service provides a state machine for component
    life-cycle management to help clients understand how the component will
    react to commands and queries.</description>
  <assumptions>Messages may be delayed, lost or reordered.</assumptions>
  <references>
    <inherits_from name="accessControl" id="urn:jaus:jss:core:AccessControl"
      version="1.1"/>
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="core" id="urn:jaus:jss:core:MessageSet"
      version="1.1"/>
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="Shutdown" declared_type_ref="core.commandClass.Shutdown"/>
      <declared_message_def name="Standby" declared_type_ref="core.commandClass.Standby"/>
      <declared_message_def name="Resume" declared_type_ref="core.commandClass.Resume"/>
      <declared_message_def name="Reset" declared_type_ref="core.commandClass.Reset"/>
      <declared_message_def name="SetEmergency" declared_type_ref="core.commandClass.SetEmergency"/>
      <declared_message_def name="ClearEmergency" declared_type_ref="core.commandClass.ClearEmergency"/>
      <declared_message_def name="QueryStatus" declared_type_ref="core.queryClass.QueryStatus"/>
    </input_set>
    <output_set>
      <declared_message_def name="ReportStatus" declared_type_ref="core.informClass.ReportStatus"/>
    </output_set>
  </message_set>
  <internal_events_set>
    <event_def name="Initialized">
      <description>An internally generated event that marks the completion of
        the initialization cycle.</description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
    <event_def name="Ready">
      <description>An internally generated event that marks the completion of the Ready cycle.</description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
    <event_def name="Failure">
      <description>An internally generated event that marks forces the component
        to a failure state.</description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
  </internal_events_set>
  <protocol_behavior>
    <start state_machine_name="accessControl.events.transport.ReceiveFSM"
      state_name="Receiving.Ready.NotControlled.Init"/>
    <state_machine name="accessControl.events.transport.ReceiveFSM" interpretation="extending
      ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">
          <state name="NotControlled" initial_state="Init">
              <state name="Init">
                <entry>
                  <action name="initialize" interpretation="Re-initialize the component's state machines."/>
                </entry>
                <transition name="Initialized">
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Standby"/>
                  </simple>
                  <action name="goStandby" interpretation="Re-initialize the component's state machines."/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
              </state>
              <state name="Standby">
                <entry>
                  <action name="standby" interpretation="Re-initialize the component's state machines."/>
                </entry>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
              </state>
              <state name="Failure"/>
              <state name="Shutdown"/>
              <state name="Emergency">
                <transition name="accessControl.events.transport.Receive"
                  interpretation="If multiple emergency conditions exist, then all conditions that have
                  been set must be specifically cleared before the component can transition
                  out of the emergency state.">
                  <parameter type="ClearEmergency" value="msg" interpretation="enveloped clear emergency message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                  <guard condition="isIDStored( transportData )" interpretation="True if the sender of
                    the message that triggered the transition is in the list
                    of clients that have set an emergency condition."/>
                  <pop/>
                  <action name="deleteID" interpretation="Remove the sender of the message that caused
                    this action from the list of clients that have an emergency condition.">
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="Failure">
                  <ns2:internal/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Shutdown" value="msg" interpretation="enveloped shutdown message"/>
                  <ns2:internal/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Reset" value="msg" interpretation="enveloped reset message"/>
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Init" />
                  </simple>
                  <action name="resetEmergency" interpretation="reset state machine."/>
                </transition>
              </state>
              <default_state>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="SetEmergency" value="msg"
                    interpretation="enveloped set emergency message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <push>
                    <end_state state="Receiving.Ready.NotControlled.Emergency"
                    />
                  </push>
                  <action name="storeID" interpretation="Add the sender of the message that caused this
                    action to the list of clients that have an emergency condition.">
                    <argument value="transportData"/>
                  </action>
                  <action name="sendRejectControlToController" interpretation="Send a Reject Control message to current controlling client (CONTROL_RELEASED: 0)">
                    <argument value=" 'CONTROL_RELEASED' "/>
                  </action>
                </transition>
                <transition name="Failure">
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Failure"/>
                  </simple>
                </transition>
              </default_state>
          </state>

          <state name="Controlled" initial_state="Standby">
              <state name="Standby">
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Resume" value="msg" interpretation="enveloped resume message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="enveloped resume message"/>
                  <guard condition="isControllingClient( transportData )"
                    interpretation="True if the message that triggered the transition is received from
                    the client that is in control of this service"/>
                  <simple>
                    <end_state state="Receiving.Ready.Controlled.Ready"/>
                  </simple>
                  <action name="goReady" interpretation="Method called if the service go into ready mode"/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
              </state>
              <state name="Ready">
                <entry>
                  <action name="ready" interpretation="ready state."/>
                </entry>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Standby" value="msg"
                    interpretation="enveloped standby message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="enveloped resume message"/>
                  <guard condition="isControllingClient( transportData )"
                    interpretation="True if the message that triggered the transition is received from
                    the client that is in control of this service"/>
                  <simple>
                    <end_state state="Receiving.Ready.Controlled.Standby"/>
                  </simple>
                  <action name="goStandby" interpretation="Method called if the service go into standby mode"/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="SetEmergency" value="msg"
                    interpretation="enveloped set emergency message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <push>
                    <end_state state="Receiving.Ready.NotControlled.Emergency"/>
                  </push>
                  <action name="storeID" interpretation="Add the sender of the message that caused this
                    action to the list of clients that have an emergency condition.">
                    <argument value="transportData"/>
                  </action>
                  <action name="sendRejectControlToController" interpretation="Send a Reject Control message to current controlling client (CONTROL_RELEASED: 0)">
                    <argument value=" 'CONTROL_RELEASED' "/>
                  </action>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Shutdown" value="msg" interpretation="enveloped shutdown message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                  <guard condition="isControllingClient(  transportData )"
                    interpretation="True if the message that triggered the transition is received from
                    the client that is in control of this service"/>
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Shutdown"
                    />
                  </simple>
                  <action name="sendRejectControlToController" interpretation="Send a Reject Control message to current controlling client (CONTROL_RELEASED: 0)">
                    <argument value=" 'CONTROL_RELEASED' "/>
                  </action>
                  <action name="shutdown" interpretation="Method called if the service go into shutdown mode"/>
                </transition>
  
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Reset" value="msg" interpretation="enveloped reset message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                  <guard condition="isControllingClient(  transportData )"
                    interpretation="True if the message that triggered the transition is received from
                    the client that is in control of this service"/>
                  <simple>
                    <end_state
                      state="Receiving.Ready.NotControlled.Init"/>
                  </simple>
                  <action name="resetReady" interpretation="reset state machine."/>
                  <action name="sendRejectControlToController" interpretation="Send a Reject Control message to current controlling client (CONTROL_RELEASED: 0)">
                    <argument value=" 'CONTROL_RELEASED' "/>
                  </action>
                </transition>
                <transition name="Ready">
                  <simple>
                    <end_state state="Receiving.Ready.Controlled.Ready"/>
                  </simple>
                  <action name="ready" interpretation="" />
                </transition>
              <default_state>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="SetEmergency" value="msg"
                    interpretation="enveloped set emergency message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <simple>
                    <end_state
                      state="Receiving.Ready.NotControlled.Emergency"
                    />
                  </simple>
                  <action name="storeID" interpretation="Add the sender of the message that caused this
                    action to the list of clients that have an emergency condition.">
                    <argument value="transportData"/>
                  </action>
                  <action name="sendRejectControlToController" interpretation="Send a Reject Control message to current controlling client (CONTROL_RELEASED: 0)">
                    <argument value=" 'CONTROL_RELEASED' "/>
                  </action>
                </transition>
                <transition name="Failure">
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Failure"/>
                  </simple>
                </transition>
              </default_state>
              </state>
              <state name="Emergency">
                <entry>
                  <action name="emergency" interpretation="ready state."/>
                </entry>
                <transition name="accessControl.events.transport.Receive"
                  interpretation="If multiple emergency conditions exist, then all conditions that have
                  been set must be specifically cleared before the component can transition
                  out of the emergency state.">
                  <parameter type="ClearEmergency" value="msg" interpretation="enveloped clear emergency message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                  <guard condition="isIDStored( transportData )" interpretation="True if the sender of
                    the message that triggered the transition is in the list
                    of clients that have set an emergency condition."/>
                  <pop/>
                  <action name="deleteID" interpretation="Remove the sender of the message that caused
                    this action from the list of clients that have an emergency condition.">
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="accessControl.Timedout">
                  <ns2:internal/>
                </transition>
                <transition name="Failure">
                  <ns2:internal/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Shutdown" value="msg" interpretation="enveloped shutdown message"/>
                  <ns2:internal/>
                </transition>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="Reset" value="msg" interpretation="enveloped reset message"/>
                  <simple>
                    <end_state state="Receiving.Ready.NotControlled.Init" />
                  </simple>
                  <action name="resetEmergency2" interpretation="reset state machine."/>
                </transition>
<!-- 
              <default_state>
                <transition name="accessControl.events.transport.Receive">
                  <parameter type="QueryStatus" value="msg"
                    interpretation="enveloped query status message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <ns2:internal/>
                  <action name="sendReportStatus" interpretation="Send a Report Status message with the current status">
                    <argument value="msg"/>
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
 -->
            </state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
