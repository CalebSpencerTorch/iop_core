/**
ROS/IOP Bridge
Copyright (c) 2017 Fraunhofer

This program is dual licensed; you can redistribute it and/or
modify it under the terms of the GNU General Public License
version 2 as published by the Free Software Foundation, or
enter into a proprietary license agreement with the copyright
holder.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; or you can read the full license at
<http://www.gnu.de/documents/gpl-2.0.html>
*/

/** \author Alexander Tiderko */

#ifndef IOP_PLUGIN_INTERFACE_H_
#define IOP_PLUGIN_INTERFACE_H_

#include <typeinfo>
#include "Service.h"
#include "Transport/JausTransport.h"

namespace iop
{
	class PluginInterface
	{
	public:
		/** This method should return a right JTS service object after create_jts_service()
		 * was called.*/
		virtual JTS::Service* get_iop_service() = 0;
		/** Returns the type of the JTS service managed by this plugin. */
		virtual const std::type_info & get_iop_service_type() = 0;
		/** Returns the type of the based JTS service. */
		virtual const std::type_info & get_base_service_type() { return typeid(NULL); }
		/** This method is called to create the JTS service managed by this plugin.
		 *  Previously, the base plugin is set by the called object. The base plugin
		 *  is determine by type returned by get_base_service_type(). You should
		 *  overwrite this method to return the right type of the base JTS service.
		 *  JTS: a service generated by JAUS Tool Set */
		virtual void create_jts_service(JTS::JausRouter* jausRouter) = 0;
		/** The init_jts_service is called after all plugins are loaded and
		 * create_jts_service() of each plugin was called. You can call
		 * Component::get_service(const std::type_info &) to find a service if it was loaded. */
		virtual void init_jts_service() {}
		virtual ~PluginInterface(){}

		/** Service URL defined by JAUS ID */
		virtual jVariableLengthString get_service_uri() = 0;
		/** Version of the IOP service managed by this plugin. */
		virtual jUnsignedByte get_version_number_major() = 0;
		virtual jUnsignedByte get_version_number_minor() = 0;

		/** The caller object sets the base plugin before call the create_jts_service(). */
		void set_base_plugin(PluginInterface *base_plugin) { p_base_plugin = base_plugin; }
		PluginInterface *get_base_plugin() { return p_base_plugin; }
		/** Returns the JTS service on which the managed service is based.
		 * param depth: the depth of the based service
		 * 	0 - NULL
		 * 	1 - based service
		 * 	2 - based service of the based service*/
		JTS::Service* get_base_service(int depth=1)
		{
			int index = 0;
			PluginInterface *base_plugin = get_base_plugin();
			JTS::Service* result = NULL;
			while (index < depth)
			{
				if (base_plugin != NULL) {
					result = base_plugin->get_iop_service();
					base_plugin = base_plugin->get_base_plugin();
				}
				index++;
			}
			return result;
		}

		/** This methods must be implemented only by discovery client plugins. */
		virtual bool is_discovery_client() { return false; }
		/** Register the JTS service by discovery service in the IOP/JAUS system. */
		virtual void register_service(PluginInterface *plugin) {}

	protected:
		PluginInterface() { p_base_plugin = NULL; }
		PluginInterface *p_base_plugin;
	};
};

#endif
